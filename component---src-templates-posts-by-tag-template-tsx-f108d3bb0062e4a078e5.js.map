{"version":3,"file":"component---src-templates-posts-by-tag-template-tsx-f108d3bb0062e4a078e5.js","mappings":"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","sources":["webpack://my-gatsby-site/./src/components/@layout/grid-layout/grid-layout.tsx","webpack://my-gatsby-site/./src/components/@shared/card-image/card-image.tsx","webpack://my-gatsby-site/./src/components/@shared/tag/colored-tag.tsx","webpack://my-gatsby-site/./src/components/pagination/pagination.tsx","webpack://my-gatsby-site/./src/components/pagination/pagination.util.ts","webpack://my-gatsby-site/./src/components/@shared/tag/filtering-tag.tsx","webpack://my-gatsby-site/./src/components/tag-navigation/tag-navigation.tsx","webpack://my-gatsby-site/./src/features/post/components/post-cards/post-card/post-card.tsx","webpack://my-gatsby-site/./src/features/post/components/post-cards/post-cards.tsx","webpack://my-gatsby-site/./src/templates/posts-by-tag-template.tsx"],"sourcesContent":["type GridLayoutProps = {\n  children: React.ReactNode;\n};\n\nexport const GridLayout = ({ children }: GridLayoutProps) => {\n  return (\n    <ul className=\"grid w-full grid-cols-1 gap-5 xs:grid-cols-2 md:gap-8 lg:grid-cols-3 xl:grid-cols-4\">\n      {children}\n    </ul>\n  );\n};\n","import {\n  GatsbyImage,\n  getImage,\n  type ImageDataLike,\n  type IGatsbyImageData,\n} from 'gatsby-plugin-image';\n\ninterface CardImageProps {\n  title?: string | null;\n  image?: {\n    readonly childImageSharp: { readonly gatsbyImageData: IGatsbyImageData } | null;\n  } | null;\n  children?: React.ReactNode;\n}\n\nexport const CardImage = ({ title, image, children }: CardImageProps) => {\n  return (\n    <div className=\"relative w-full overflow-hidden\">\n      <GatsbyImage\n        className=\"rounded-t-md transition-all duration-300 hover:scale-110 hover:saturate-200\"\n        image={getImage(image as ImageDataLike)!}\n        alt={title ?? 'card-image'}\n        objectFit=\"cover\"\n      />\n      {children}\n    </div>\n  );\n};\n","const tagColorSet: {\n  [key: string]: string;\n} = {\n  JavaScript: 'bg-yellow-400 text-black',\n  React: 'bg-blue-500 text-black',\n  Canvas: 'bg-red-700',\n  Web: 'bg-teal-600',\n  YarnBerry: 'bg-emerald-700',\n  'Package-Manager': 'bg-orange-700',\n  Testing: 'bg-rose-600',\n};\n\ntype ColoredTagProps = {\n  tagName: string | null;\n  className?: string;\n};\n\nexport const ColoredTag = ({ tagName, className }: ColoredTagProps) => {\n  return (\n    <span\n      className={`rounded-xl px-2 py-1 text-xs shadow-lg ${\n        tagColorSet[tagName!] ?? 'bg-gray-700'\n      } ${className}`}\n    >\n      {tagName}\n    </span>\n  );\n};\n","import { Link } from 'gatsby';\n\nimport { Routing } from '@/fixtures/routing';\nimport { getPaginationData } from './pagination.util';\n\ninterface PaginationProps {\n  to: string;\n  pageContext: {\n    tag?: string;\n    limit: number;\n    skip: number;\n    totalPagination: number;\n    postsPerPage: number;\n    currentPage: number;\n  };\n}\n\nexport const Pagination = ({ to, pageContext }: PaginationProps) => {\n  const { totalPagination, postsPerPage, currentPage } = pageContext;\n  const maxSize = 5;\n\n  const { pages } = getPaginationData(\n    totalPagination * postsPerPage,\n    currentPage,\n    postsPerPage,\n    maxSize\n  );\n\n  let prev = currentPage === 2 ? `${to}` : `${to}${currentPage - 1}/`;\n  let next = `${to}${currentPage + 1}/`;\n\n  if (pageContext.tag) {\n    prev =\n      currentPage === 2\n        ? `${Routing.slugifyTag(pageContext.tag)}`\n        : `${Routing.slugifyTag(pageContext.tag)}${currentPage - 1}/`;\n\n    next = `${Routing.slugifyTag(pageContext.tag)}${currentPage + 1}/`;\n  }\n\n  const getLink = (num: number) => {\n    if (pageContext.tag) {\n      return num === 1\n        ? `${Routing.slugifyTag(pageContext.tag)}`\n        : `${Routing.slugifyTag(pageContext.tag)}${num}/`;\n    }\n\n    return num === 1 ? `${to}` : `${to}${num}/`;\n  };\n\n  return (\n    <div className=\"flex justify-center gap-2 py-10 px-4 sm:py-12 md:py-14\">\n      {currentPage !== 1 && (\n        <Link className=\"hover-text-amber px-1 tracking-wider\" to={prev} rel=\"prev\">\n          Prev\n        </Link>\n      )}\n\n      <ul className=\"flex justify-center gap-1\">\n        {Array.from(pages).map((num) => (\n          <li key={num}>\n            <Link\n              className={`hover-text-amber px-2 py-1 ${\n                num === currentPage ? 'rounded-md bg-[#2e3039]' : ''\n              }`}\n              to={getLink(num)}\n            >\n              {num}\n            </Link>\n          </li>\n        ))}\n      </ul>\n\n      {currentPage !== totalPagination && (\n        <Link className=\"hover-text-amber px-1 tracking-wider\" to={next} rel=\"next\">\n          Next\n        </Link>\n      )}\n    </div>\n  );\n};\n","export const getPaginationData = (\n  totalItemCount: number,\n  currentPage = 1,\n  pageSize = 12,\n  maxPages = 5\n) => {\n  let totalPages = Math.ceil(totalItemCount / pageSize);\n\n  if (currentPage < 1) {\n    currentPage = 1;\n  } else if (currentPage > totalPages) {\n    currentPage = totalPages;\n  }\n\n  let startPage: number, endPage: number;\n\n  if (totalPages <= maxPages) {\n    startPage = 1;\n    endPage = totalPages;\n  } else {\n    let maxPagesBeforeCurrentPage = Math.floor(maxPages / 2);\n    let maxPagesAfterCurrentPage = Math.ceil(maxPages / 2) - 1;\n    if (currentPage <= maxPagesBeforeCurrentPage) {\n      startPage = 1;\n      endPage = maxPages;\n    } else if (currentPage + maxPagesAfterCurrentPage >= totalPages) {\n      startPage = totalPages - maxPages + 1;\n      endPage = totalPages;\n    } else {\n      startPage = currentPage - maxPagesBeforeCurrentPage;\n      endPage = currentPage + maxPagesAfterCurrentPage;\n    }\n  }\n\n  let startIndex = (currentPage - 1) * pageSize;\n  let endIndex = Math.min(startIndex + pageSize - 1, totalItemCount - 1);\n\n  let pages = Array.from(Array(endPage + 1 - startPage).keys()).map((i) => startPage + i);\n\n  return {\n    totalItems: totalItemCount,\n    currentPage: currentPage,\n    pageSize: pageSize,\n    totalPages: totalPages,\n    startPage: startPage,\n    endPage: endPage,\n    startIndex: startIndex,\n    endIndex: endIndex,\n    pages: pages,\n  };\n};\n","import { Link } from 'gatsby';\n\nimport { Routing } from '@/fixtures/routing';\n\ntype FilteringTagProps = {\n  currentTag?: string;\n  tagName: string;\n  totalCount: number;\n};\n\nexport const FilteringTag = ({ currentTag, tagName, totalCount }: FilteringTagProps) => {\n  return (\n    <Link\n      className={`hover-text-amber rounded-3xl bg-[#2e3039] px-4 py-2 text-sm shadow-xl xs:text-base ${\n        currentTag === tagName ? 'bg-[#232c42] text-amber-300' : ''\n      }`}\n      to={Routing.slugifyTag(tagName)}\n    >\n      <span>{tagName}</span>\n      <span> ({totalCount})</span>\n    </Link>\n  );\n};\n","import { graphql, useStaticQuery } from 'gatsby';\nimport { BsFillTagsFill } from 'react-icons/bs';\n\nimport { FilteringTag } from '@/components/@shared/tag/filtering-tag';\n\ntype TagNavigationProps = {\n  currentTag: string;\n};\n\ntype TagNavigationData = {\n  allMdx: {\n    totalCount: number;\n    group: {\n      fieldValue: string;\n      totalCount: number;\n    }[];\n  };\n};\n\nexport const TagNavigation = ({ currentTag }: TagNavigationProps) => {\n  const data = useStaticQuery<TagNavigationData>(graphql`\n    query {\n      allMdx {\n        totalCount\n        group(field: frontmatter___tags) {\n          fieldValue\n          totalCount\n        }\n      }\n    }\n  `);\n\n  const { group: tags, totalCount: allCount } = data.allMdx;\n\n  return (\n    <div className=\"lg:w-2/3\">\n      <div className=\"mb-3 flex items-center gap-2\">\n        <BsFillTagsFill />\n        <span>태그 목록</span>\n      </div>\n\n      <ul className=\"flex flex-wrap pb-4\">\n        <li className=\"mb-2 mr-2 flex\">\n          <FilteringTag currentTag={currentTag} tagName=\"ALL\" totalCount={allCount} />\n        </li>\n        {tags.map(({ fieldValue, totalCount }) => (\n          <li key={fieldValue} className=\"mb-2 mr-2 flex\">\n            <FilteringTag currentTag={currentTag} tagName={fieldValue} totalCount={totalCount} />\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import { Link, graphql } from 'gatsby';\n\nimport { Routing } from '@/fixtures/routing';\n\nimport { CardImage } from '@/components/@shared/card-image';\nimport { ColoredTag } from '@/components/@shared/tag/colored-tag';\n\ntype PostCardProps = {\n  frontmatter: Queries.PostCardDataFragment['frontmatter'];\n};\n\nexport const PostCard = ({ frontmatter }: PostCardProps) => {\n  return (\n    <li className=\"flex h-full w-full flex-col rounded-md  bg-gradient-to-tl from-zinc-900 to-slate-800\">\n      <Link to={Routing.POSTS.toString(frontmatter?.slug)}>\n        <CardImage title={frontmatter?.title} image={frontmatter?.image} />\n      </Link>\n\n      <div className=\"flex flex-1 flex-col gap-2 p-5\">\n        <Link className=\"flex items-center gap-2\" to={Routing.POSTS.toString(frontmatter?.slug)}>\n          <h2 className=\"text-amber-300\">{frontmatter?.title}</h2>\n        </Link>\n\n        <p className=\"relative text-ellipsis break-words line-clamp-2\">\n          {frontmatter?.description}\n        </p>\n\n        <ul className=\"mt-auto flex flex-wrap gap-2\">\n          {frontmatter?.tags?.map((tagName) => (\n            <li key={tagName}>\n              <ColoredTag tagName={tagName} />\n            </li>\n          ))}\n        </ul>\n\n        <div className=\"mt-1 self-end\">\n          <span className=\"text-sm\">📅 {frontmatter?.date}</span>\n        </div>\n      </div>\n    </li>\n  );\n};\n\nexport const query = graphql`\n  fragment PostCardData on Mdx {\n    frontmatter {\n      title\n      description\n      slug\n      tags\n      date(formatString: \"YYYY년 MM월 DD일\")\n      image {\n        childImageSharp {\n          gatsbyImageData(placeholder: TRACED_SVG, width: 517, height: 380)\n        }\n      }\n    }\n  }\n`;\n","import { graphql } from 'gatsby';\n\nimport { GridLayout } from '@/components/@layout/grid-layout';\nimport { PostCard } from './post-card';\n\ninterface PostCardsProps {\n  posts: Queries.PostCardsDataFragment['nodes'];\n}\n\nexport const PostCards = ({ posts }: PostCardsProps) => {\n  return (\n    <GridLayout>\n      {posts.map((post) => (\n        <PostCard key={post.id} frontmatter={post.frontmatter} />\n      ))}\n    </GridLayout>\n  );\n};\n\nexport const query = graphql`\n  fragment PostCardsData on MdxConnection {\n    nodes {\n      id\n      ...PostCardData\n    }\n  }\n`;\n","import { graphql, type PageProps, type HeadFC } from 'gatsby';\n\nimport { Routing } from '@/fixtures/routing';\n\nimport { SEO } from '@/components/seo';\nimport { BaseLayout } from '@/components/@layout/base-layout';\nimport { TagNavigation } from '@/components/tag-navigation';\nimport { PostCards } from '@/features/post/components/post-cards';\nimport { Pagination } from '@/components/pagination';\n\ntype PostByTagPageContext = {\n  tag: string;\n  limit: number;\n  skip: number;\n  totalPagination: number;\n  postsPerPage: number;\n  currentPage: number;\n};\n\nconst PostsByTagTemplate = ({\n  data,\n  pageContext,\n}: PageProps<Queries.GetPostsByTagQuery, PostByTagPageContext>) => {\n  const { nodes: posts } = data.allMdx;\n\n  return (\n    <BaseLayout className=\"max-w-[1720px] py-10 px-6 sm:px-10 md:p-20\">\n      <TagNavigation currentTag={pageContext.tag} />\n      <PostCards posts={posts} />\n      <Pagination to={Routing.POSTS.toString()} pageContext={pageContext} />\n    </BaseLayout>\n  );\n};\n\nexport const query = graphql`\n  query GetPostsByTag($tag: String, $limit: Int, $skip: Int) {\n    allMdx(\n      limit: $limit\n      skip: $skip\n      sort: { fields: frontmatter___date, order: DESC }\n      filter: { frontmatter: { tags: { eq: $tag } } }\n    ) {\n      ...PostCardsData\n    }\n  }\n`;\n\nexport default PostsByTagTemplate;\n\nexport const Head: HeadFC = () => (\n  <SEO title=\"포스트 | 공존의 발자취\" pathname={Routing.POSTS.toString()} />\n);\n"],"names":["GridLayout","children","_jsx","className","CardImage","title","image","_jsxs","GatsbyImage","getImage","alt","objectFit","tagColorSet","JavaScript","React","Canvas","Web","YarnBerry","Testing","ColoredTag","tagName","Pagination","to","pageContext","totalPagination","postsPerPage","currentPage","totalItemCount","pageSize","maxPages","startPage","endPage","totalPages","Math","ceil","maxPagesBeforeCurrentPage","floor","maxPagesAfterCurrentPage","startIndex","endIndex","min","pages","Array","from","keys","map","i","totalItems","getPaginationData","prev","next","tag","Routing","getLink","num","Link","rel","FilteringTag","currentTag","totalCount","TagNavigation","useStaticQuery","allMdx","tags","group","allCount","BsFillTagsFill","fieldValue","PostCard","frontmatter","slug","description","_frontmatter$tags","date","PostCards","posts","post","id","data","nodes","BaseLayout","Head","SEO","pathname"],"sourceRoot":""}