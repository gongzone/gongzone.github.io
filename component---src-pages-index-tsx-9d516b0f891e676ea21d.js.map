{"version":3,"file":"component---src-pages-index-tsx-9d516b0f891e676ea21d.js","mappings":"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","sources":["webpack://my-gatsby-site/./src/components/@layout/grid-layout/grid-layout.tsx","webpack://my-gatsby-site/./src/components/@shared/card-image/card-image.tsx","webpack://my-gatsby-site/./src/components/@shared/tag/colored-tag.tsx","webpack://my-gatsby-site/./src/features/post/components/post-cards/post-card/post-card.tsx","webpack://my-gatsby-site/./src/features/post/components/post-cards/post-cards.tsx","webpack://my-gatsby-site/./src/features/series/components/series-cards/series-card/series-card.tsx","webpack://my-gatsby-site/./src/features/series/components/series-cards/series-cards.tsx","webpack://my-gatsby-site/./src/components/home-hero/hero.tsx","webpack://my-gatsby-site/./src/components/home-section/home-section.tsx","webpack://my-gatsby-site/./src/pages/index.tsx"],"sourcesContent":["type GridLayoutProps = {\n  children: React.ReactNode;\n};\n\nexport const GridLayout = ({ children }: GridLayoutProps) => {\n  return (\n    <ul className=\"grid w-full grid-cols-1 gap-5 xs:grid-cols-2 md:gap-8 lg:grid-cols-3 xl:grid-cols-4\">\n      {children}\n    </ul>\n  );\n};\n","import {\n  GatsbyImage,\n  getImage,\n  type ImageDataLike,\n  type IGatsbyImageData,\n} from 'gatsby-plugin-image';\n\ninterface CardImageProps {\n  title?: string | null;\n  image?: {\n    readonly childImageSharp: { readonly gatsbyImageData: IGatsbyImageData } | null;\n  } | null;\n  children?: React.ReactNode;\n}\n\nexport const CardImage = ({ title, image, children }: CardImageProps) => {\n  return (\n    <div className=\"relative w-full overflow-hidden\">\n      <GatsbyImage\n        className=\"rounded-t-md transition-all duration-300 hover:scale-110 hover:saturate-200\"\n        image={getImage(image as ImageDataLike)!}\n        alt={title ?? 'card-image'}\n        objectFit=\"cover\"\n      />\n      {children}\n    </div>\n  );\n};\n","const tagColorSet: {\n  [key: string]: string;\n} = {\n  JavaScript: 'bg-yellow-400 text-black',\n  React: 'bg-blue-500 text-black',\n  Canvas: 'bg-red-700',\n  Web: 'bg-teal-600',\n  YarnBerry: 'bg-emerald-700',\n  'Package-Manager': 'bg-orange-700',\n  Testing: 'bg-rose-600',\n};\n\ntype ColoredTagProps = {\n  tagName: string | null;\n  className?: string;\n};\n\nexport const ColoredTag = ({ tagName, className }: ColoredTagProps) => {\n  return (\n    <span\n      className={`rounded-xl px-2 py-1 text-xs shadow-lg ${\n        tagColorSet[tagName!] ?? 'bg-gray-700'\n      } ${className}`}\n    >\n      {tagName}\n    </span>\n  );\n};\n","import { Link, graphql } from 'gatsby';\n\nimport { Routing } from '@/fixtures/routing';\n\nimport { CardImage } from '@/components/@shared/card-image';\nimport { ColoredTag } from '@/components/@shared/tag/colored-tag';\n\ntype PostCardProps = {\n  frontmatter: Queries.PostCardDataFragment['frontmatter'];\n};\n\nexport const PostCard = ({ frontmatter }: PostCardProps) => {\n  return (\n    <li className=\"flex h-full w-full flex-col rounded-md  bg-gradient-to-tl from-zinc-900 to-slate-800\">\n      <Link to={Routing.POSTS.toString(frontmatter?.slug)}>\n        <CardImage title={frontmatter?.title} image={frontmatter?.image} />\n      </Link>\n\n      <div className=\"flex flex-1 flex-col gap-2 p-5\">\n        <Link className=\"flex items-center gap-2\" to={Routing.POSTS.toString(frontmatter?.slug)}>\n          <h2 className=\"text-amber-300\">{frontmatter?.title}</h2>\n        </Link>\n\n        <p className=\"relative text-ellipsis break-words line-clamp-2\">\n          {frontmatter?.description}\n        </p>\n\n        <ul className=\"mt-auto flex flex-wrap gap-2\">\n          {frontmatter?.tags?.map((tagName) => (\n            <li key={tagName}>\n              <ColoredTag tagName={tagName} />\n            </li>\n          ))}\n        </ul>\n\n        <div className=\"mt-1 self-end\">\n          <span className=\"text-sm\">📅 {frontmatter?.date}</span>\n        </div>\n      </div>\n    </li>\n  );\n};\n\nexport const query = graphql`\n  fragment PostCardData on Mdx {\n    frontmatter {\n      title\n      description\n      slug\n      tags\n      date(formatString: \"YYYY년 MM월 DD일\")\n      image {\n        childImageSharp {\n          gatsbyImageData(placeholder: TRACED_SVG, width: 517, height: 380)\n        }\n      }\n    }\n  }\n`;\n","import { graphql } from 'gatsby';\n\nimport { GridLayout } from '@/components/@layout/grid-layout';\nimport { PostCard } from './post-card';\n\ninterface PostCardsProps {\n  posts: Queries.PostCardsDataFragment['nodes'];\n}\n\nexport const PostCards = ({ posts }: PostCardsProps) => {\n  return (\n    <GridLayout>\n      {posts.map((post) => (\n        <PostCard key={post.id} frontmatter={post.frontmatter} />\n      ))}\n    </GridLayout>\n  );\n};\n\nexport const query = graphql`\n  fragment PostCardsData on MdxConnection {\n    nodes {\n      id\n      ...PostCardData\n    }\n  }\n`;\n","import { Link, graphql } from 'gatsby';\nimport type { IGatsbyImageData } from 'gatsby-plugin-image';\nimport { CgList, CgAwards } from 'react-icons/cg';\n\nimport { Routing } from '@/fixtures/routing';\n\nimport { CardImage } from '@/components/@shared/card-image';\n\ntype SeriesCardProps = {\n  title?: string;\n  totalCount?: number;\n  image?: {\n    readonly childImageSharp: { readonly gatsbyImageData: IGatsbyImageData } | null;\n  } | null;\n};\n\nexport const SeriesCard = ({ title, totalCount, image }: SeriesCardProps) => {\n  return (\n    <li className=\"flex h-full w-full flex-col rounded-md\">\n      <Link to={Routing.slugifySeries(title!)}>\n        <CardImage title={title} image={image}>\n          <div className=\"absolute top-0 bottom-0 right-0 flex w-[44.8%] items-center justify-center gap-3 rounded-tr-md bg-black/80 text-xl\">\n            <CgList />\n            <span>{totalCount}</span>\n          </div>\n        </CardImage>\n      </Link>\n\n      <div className=\"mt-3 mb-2 flex flex-col gap-2\">\n        <Link to={Routing.slugifySeries(title!)}>\n          <div className=\"flex items-center gap-1\">\n            <span className=\"text-lg\">\n              <CgAwards />\n            </span>\n            <h2 className=\"text-ellipsis break-words line-clamp-2\">{title}</h2>\n          </div>\n        </Link>\n      </div>\n    </li>\n  );\n};\n\nexport const query = graphql`\n  fragment SeriesCardData on MdxGroupConnection {\n    fieldValue\n    totalCount\n  }\n`;\n","import { graphql } from 'gatsby';\n\nimport { GridLayout } from '@/components/@layout/grid-layout';\nimport { SeriesCard } from './series-card';\n\ntype SeriesCardsProps = {\n  series: Queries.SeriesCardsDataFragment['group'];\n};\n\nexport const SeriesCards = ({ series }: SeriesCardsProps) => {\n  return (\n    <GridLayout>\n      {series.map((s) => (\n        <SeriesCard\n          key={s.fieldValue}\n          title={s.fieldValue!}\n          totalCount={s.totalCount}\n          image={s.nodes[0]!.frontmatter?.image}\n        />\n      ))}\n    </GridLayout>\n  );\n};\n\nexport const query = graphql`\n  fragment SeriesCardsData on MdxConnection {\n    group(field: frontmatter___series___seriesName, limit: $limit, skip: $skip) {\n      ...SeriesCardData\n      nodes {\n        frontmatter {\n          image {\n            childImageSharp {\n              gatsbyImageData(placeholder: TRACED_SVG, width: 517, height: 380)\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","import { StaticImage } from 'gatsby-plugin-image';\nimport { FiFeather, FiCoffee } from 'react-icons/fi';\n\nexport const Hero = () => {\n  return (\n    <div className=\"relative mx-auto my-8 flex w-full select-none flex-col items-center justify-center gap-6 px-6 md:my-16 md:flex-row lg:my-20 xl:my-24 3xl:my-28\">\n      <div className=\"w-56 xs:w-72 md:w-96\">\n        <StaticImage\n          className=\"w-full\"\n          src=\"../../assets/images/hero-rabbit.png\"\n          alt=\"hero-background\"\n          objectFit=\"contain\"\n          placeholder=\"none\"\n          loading=\"eager\"\n        />\n      </div>\n\n      <div>\n        <h2 className=\"flex flex-col gap-1 text-2xl font-bold\">\n          <span className=\"text-5xl\">Simplicity</span>\n          <span>is the soul of efficiency.</span>\n        </h2>\n\n        <div className=\"flex select-none items-center justify-center gap-4 px-3 py-5 2xl:my-10\">\n          <FiFeather size={65} />\n          <div className=\"flex flex-col gap-1\">\n            <div className=\"flex items-center gap-1 2xl:gap-2\">\n              <FiCoffee className=\"text-2xl text-zinc-400 2xl:text-3xl\" />\n              <span className=\"text-2xl font-bold text-emerald-400 2xl:text-3xl\">GongZone</span>\n            </div>\n            <div className=\"text-lg font-bold\">\n              <p>who mainly writes</p>\n              <p>about web development.</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { Link } from 'gatsby';\nimport type { ReactNode } from 'react';\nimport { FiPackage, FiArrowRightCircle } from 'react-icons/fi';\n\ninterface SectionProps {\n  name: string;\n  to: string;\n  children: ReactNode;\n}\n\nexport const HomeSection = ({ name, to, children }: SectionProps) => {\n  return (\n    <section className=\"mb-8 flex flex-col justify-center\">\n      <div className=\"mb-5 flex items-center gap-2\">\n        <span className=\"text-xl 2xl:text-2xl\">\n          <FiPackage />\n        </span>\n        <span className=\"text-lg font-bold 3xl:text-xl\">최신 {name} 목록</span>\n      </div>\n\n      {children}\n\n      <div className=\"my-6 text-center 2xl:my-8\">\n        <Link className=\"group inline-flex items-center gap-1 p-2\" to={to}>\n          <span>\n            <FiArrowRightCircle />\n          </span>\n          <span className=\"text-sm text-neutral-300 transition-colors duration-300 group-hover:text-amber-300 2xl:text-base\">\n            전체 {name} 보러가기\n          </span>\n        </Link>\n      </div>\n    </section>\n  );\n};\n","import { graphql, type HeadFC, type PageProps } from 'gatsby';\n\nimport { Routing } from '@/fixtures/routing';\n\nimport { SEO } from '@/components/seo';\nimport { BaseLayout } from '@/components/@layout/base-layout';\nimport { Hero } from '@/components/home-hero';\nimport { HomeSection } from '@/components/home-section';\nimport { PostCards } from '@/features/post/components/post-cards';\nimport { SeriesCards } from '@/features/series/components/series-cards';\n\nconst IndexPage = ({ data }: PageProps<Queries.GetIndexPageDataQuery>) => {\n  const { nodes: posts } = data.posts;\n  const { group: series } = data.series;\n\n  return (\n    <BaseLayout>\n      <Hero />\n\n      <div className=\"mx-auto max-w-[1720px] px-6 sm:px-10 md:px-14 lg:px-[66px]\">\n        <HomeSection name=\"글\" to={Routing.POSTS.toString()}>\n          <PostCards posts={posts} />\n        </HomeSection>\n\n        <HomeSection name=\"시리즈\" to={Routing.SERIES.toString()}>\n          <SeriesCards series={series} />\n        </HomeSection>\n      </div>\n    </BaseLayout>\n  );\n};\n\nexport const query = graphql`\n  query GetIndexPageData($limit: Int = 8, $skip: Int = 0) {\n    posts: allMdx(limit: $limit, sort: { fields: frontmatter___date, order: DESC }) {\n      ...PostCardsData\n    }\n    series: allMdx(sort: { fields: frontmatter___date, order: DESC }) {\n      ...SeriesCardsData\n    }\n  }\n`;\n\nexport default IndexPage;\n\nexport const Head: HeadFC = () => <SEO title=\"공존의 발자취\" pathname={Routing.HOME.toString()} />;\n"],"names":["GridLayout","children","_jsx","className","CardImage","title","image","_jsxs","GatsbyImage","getImage","alt","objectFit","tagColorSet","JavaScript","React","Canvas","Web","YarnBerry","Testing","ColoredTag","tagName","PostCard","frontmatter","Link","to","Routing","slug","description","tags","_frontmatter$tags","map","date","PostCards","posts","post","id","SeriesCard","totalCount","CgList","CgAwards","SeriesCards","series","s","fieldValue","nodes","_frontmatter","Hero","StaticImage","src","placeholder","loading","FiFeather","size","FiCoffee","HomeSection","name","FiPackage","FiArrowRightCircle","data","group","BaseLayout","Head","SEO","pathname"],"sourceRoot":""}