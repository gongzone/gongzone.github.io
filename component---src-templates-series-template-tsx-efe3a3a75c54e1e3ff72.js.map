{"version":3,"file":"component---src-templates-series-template-tsx-efe3a3a75c54e1e3ff72.js","mappings":"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","sources":["webpack://my-gatsby-site/./src/components/@layout/grid-layout/grid-layout.tsx","webpack://my-gatsby-site/./src/components/@shared/card-image/card-image.tsx","webpack://my-gatsby-site/./src/components/pagination/pagination.tsx","webpack://my-gatsby-site/./src/components/pagination/pagination.util.ts","webpack://my-gatsby-site/./src/features/series/components/series-cards/series-card/series-card.tsx","webpack://my-gatsby-site/./src/features/series/components/series-cards/series-cards.tsx","webpack://my-gatsby-site/./src/templates/series-template.tsx"],"sourcesContent":["type GridLayoutProps = {\n  children: React.ReactNode;\n};\n\nexport const GridLayout = ({ children }: GridLayoutProps) => {\n  return (\n    <ul className=\"grid w-full grid-cols-1 gap-5 xs:grid-cols-2 md:gap-8 lg:grid-cols-3 xl:grid-cols-4\">\n      {children}\n    </ul>\n  );\n};\n","import {\n  GatsbyImage,\n  getImage,\n  type ImageDataLike,\n  type IGatsbyImageData,\n} from 'gatsby-plugin-image';\n\ninterface CardImageProps {\n  title?: string | null;\n  image?: {\n    readonly childImageSharp: { readonly gatsbyImageData: IGatsbyImageData } | null;\n  } | null;\n  children?: React.ReactNode;\n}\n\nexport const CardImage = ({ title, image, children }: CardImageProps) => {\n  return (\n    <div className=\"relative w-full overflow-hidden\">\n      <GatsbyImage\n        className=\"rounded-t-md transition-all duration-300 hover:scale-110 hover:saturate-200\"\n        image={getImage(image as ImageDataLike)!}\n        alt={title ?? 'card-image'}\n        objectFit=\"cover\"\n      />\n      {children}\n    </div>\n  );\n};\n","import { Link } from 'gatsby';\n\nimport { Routing } from '@/fixtures/routing';\nimport { getPaginationData } from './pagination.util';\n\ninterface PaginationProps {\n  to: string;\n  pageContext: {\n    tag?: string;\n    limit: number;\n    skip: number;\n    totalPagination: number;\n    postsPerPage: number;\n    currentPage: number;\n  };\n}\n\nexport const Pagination = ({ to, pageContext }: PaginationProps) => {\n  const { totalPagination, postsPerPage, currentPage } = pageContext;\n  const maxSize = 5;\n\n  const { pages } = getPaginationData(\n    totalPagination * postsPerPage,\n    currentPage,\n    postsPerPage,\n    maxSize\n  );\n\n  let prev = currentPage === 2 ? `${to}` : `${to}${currentPage - 1}/`;\n  let next = `${to}${currentPage + 1}/`;\n\n  if (pageContext.tag) {\n    prev =\n      currentPage === 2\n        ? `${Routing.slugifyTag(pageContext.tag)}`\n        : `${Routing.slugifyTag(pageContext.tag)}${currentPage - 1}/`;\n\n    next = `${Routing.slugifyTag(pageContext.tag)}${currentPage + 1}/`;\n  }\n\n  const getLink = (num: number) => {\n    if (pageContext.tag) {\n      return num === 1\n        ? `${Routing.slugifyTag(pageContext.tag)}`\n        : `${Routing.slugifyTag(pageContext.tag)}${num}/`;\n    }\n\n    return num === 1 ? `${to}` : `${to}${num}/`;\n  };\n\n  return (\n    <div className=\"flex justify-center gap-2 py-10 px-4 sm:py-12 md:py-14\">\n      {currentPage !== 1 && (\n        <Link className=\"hover-text-amber px-1 tracking-wider\" to={prev} rel=\"prev\">\n          Prev\n        </Link>\n      )}\n\n      <ul className=\"flex justify-center gap-1\">\n        {Array.from(pages).map((num) => (\n          <li key={num}>\n            <Link\n              className={`hover-text-amber px-2 py-1 ${\n                num === currentPage ? 'rounded-md bg-[#2e3039]' : ''\n              }`}\n              to={getLink(num)}\n            >\n              {num}\n            </Link>\n          </li>\n        ))}\n      </ul>\n\n      {currentPage !== totalPagination && (\n        <Link className=\"hover-text-amber px-1 tracking-wider\" to={next} rel=\"next\">\n          Next\n        </Link>\n      )}\n    </div>\n  );\n};\n","export const getPaginationData = (\n  totalItemCount: number,\n  currentPage = 1,\n  pageSize = 12,\n  maxPages = 5\n) => {\n  let totalPages = Math.ceil(totalItemCount / pageSize);\n\n  if (currentPage < 1) {\n    currentPage = 1;\n  } else if (currentPage > totalPages) {\n    currentPage = totalPages;\n  }\n\n  let startPage: number, endPage: number;\n\n  if (totalPages <= maxPages) {\n    startPage = 1;\n    endPage = totalPages;\n  } else {\n    let maxPagesBeforeCurrentPage = Math.floor(maxPages / 2);\n    let maxPagesAfterCurrentPage = Math.ceil(maxPages / 2) - 1;\n    if (currentPage <= maxPagesBeforeCurrentPage) {\n      startPage = 1;\n      endPage = maxPages;\n    } else if (currentPage + maxPagesAfterCurrentPage >= totalPages) {\n      startPage = totalPages - maxPages + 1;\n      endPage = totalPages;\n    } else {\n      startPage = currentPage - maxPagesBeforeCurrentPage;\n      endPage = currentPage + maxPagesAfterCurrentPage;\n    }\n  }\n\n  let startIndex = (currentPage - 1) * pageSize;\n  let endIndex = Math.min(startIndex + pageSize - 1, totalItemCount - 1);\n\n  let pages = Array.from(Array(endPage + 1 - startPage).keys()).map((i) => startPage + i);\n\n  return {\n    totalItems: totalItemCount,\n    currentPage: currentPage,\n    pageSize: pageSize,\n    totalPages: totalPages,\n    startPage: startPage,\n    endPage: endPage,\n    startIndex: startIndex,\n    endIndex: endIndex,\n    pages: pages,\n  };\n};\n","import { Link, graphql } from 'gatsby';\nimport type { IGatsbyImageData } from 'gatsby-plugin-image';\nimport { CgList, CgAwards } from 'react-icons/cg';\n\nimport { Routing } from '@/fixtures/routing';\n\nimport { CardImage } from '@/components/@shared/card-image';\n\ntype SeriesCardProps = {\n  title?: string;\n  totalCount?: number;\n  image?: {\n    readonly childImageSharp: { readonly gatsbyImageData: IGatsbyImageData } | null;\n  } | null;\n};\n\nexport const SeriesCard = ({ title, totalCount, image }: SeriesCardProps) => {\n  return (\n    <li className=\"flex h-full w-full flex-col rounded-md\">\n      <Link to={Routing.slugifySeries(title!)}>\n        <CardImage title={title} image={image}>\n          <div className=\"absolute top-0 bottom-0 right-0 flex w-[44.8%] items-center justify-center gap-3 rounded-tr-md bg-black/80 text-xl\">\n            <CgList />\n            <span>{totalCount}</span>\n          </div>\n        </CardImage>\n      </Link>\n\n      <div className=\"mt-3 mb-2 flex flex-col gap-2\">\n        <Link to={Routing.slugifySeries(title!)}>\n          <div className=\"flex items-center gap-1\">\n            <span className=\"text-lg\">\n              <CgAwards />\n            </span>\n            <h2 className=\"text-ellipsis break-words line-clamp-2\">{title}</h2>\n          </div>\n        </Link>\n      </div>\n    </li>\n  );\n};\n\nexport const query = graphql`\n  fragment SeriesCardData on MdxGroupConnection {\n    fieldValue\n    totalCount\n  }\n`;\n","import { graphql } from 'gatsby';\n\nimport { GridLayout } from '@/components/@layout/grid-layout';\nimport { SeriesCard } from './series-card';\n\ntype SeriesCardsProps = {\n  series: Queries.SeriesCardsDataFragment['group'];\n};\n\nexport const SeriesCards = ({ series }: SeriesCardsProps) => {\n  return (\n    <GridLayout>\n      {series.map((s) => (\n        <SeriesCard\n          key={s.fieldValue}\n          title={s.fieldValue!}\n          totalCount={s.totalCount}\n          image={s.nodes[0]!.frontmatter?.image}\n        />\n      ))}\n    </GridLayout>\n  );\n};\n\nexport const query = graphql`\n  fragment SeriesCardsData on MdxConnection {\n    group(field: frontmatter___series___seriesName, limit: $limit, skip: $skip) {\n      ...SeriesCardData\n      nodes {\n        frontmatter {\n          image {\n            childImageSharp {\n              gatsbyImageData(placeholder: TRACED_SVG, width: 517, height: 380)\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","import { graphql, type PageProps, type HeadFC } from 'gatsby';\nimport { FaLayerGroup } from 'react-icons/fa';\n\nimport { Routing } from '@/fixtures/routing';\n\nimport { SEO } from '@/components/seo';\nimport { BaseLayout } from '@/components/@layout/base-layout';\nimport { SeriesCards } from '@/features/series/components/series-cards';\nimport { Pagination } from '@/components/pagination';\n\ninterface SeriesPageContext {\n  limit: number;\n  skip: number;\n  totalPagination: number;\n  postsPerPage: number;\n  currentPage: number;\n}\n\nconst SeriesTemplate = ({\n  data,\n  pageContext,\n}: PageProps<Queries.GetSeriesQuery, SeriesPageContext>) => {\n  const { group: series } = data.series;\n\n  return (\n    <BaseLayout className=\"max-w-[1720px] py-10 px-5 xs:px-14 md:p-20\">\n      <div className=\"mb-4\">\n        <div className=\"mb-2 inline-flex items-center gap-2 rounded-3xl bg-[#2e3039] px-4 py-2\">\n          <FaLayerGroup />\n          <span className=\"text-lg\">전체 시리즈 목록</span>\n        </div>\n        <div className=\"pl-4\">\n          <span className=\"text-zinc-400\">&bull; 시리즈 별로 포스트를 탐방해보세요.</span>\n        </div>\n      </div>\n\n      <SeriesCards series={series} />\n      <Pagination to={Routing.SERIES.toString()} pageContext={pageContext} />\n    </BaseLayout>\n  );\n};\n\nexport const query = graphql`\n  query GetSeries($limit: Int = 8, $skip: Int = 0) {\n    series: allMdx {\n      ...SeriesCardsData\n    }\n  }\n`;\n\nexport default SeriesTemplate;\n\nexport const Head: HeadFC = () => (\n  <SEO title=\"시리즈 | 공존의 발자취\" pathname={Routing.SERIES.toString()} />\n);\n"],"names":["GridLayout","children","_jsx","className","CardImage","title","image","_jsxs","GatsbyImage","getImage","alt","objectFit","Pagination","to","pageContext","totalPagination","postsPerPage","currentPage","totalItemCount","pageSize","maxPages","startPage","endPage","totalPages","Math","ceil","maxPagesBeforeCurrentPage","floor","maxPagesAfterCurrentPage","startIndex","endIndex","min","pages","Array","from","keys","map","i","totalItems","getPaginationData","prev","next","tag","Routing","getLink","num","Link","rel","SeriesCard","totalCount","CgList","CgAwards","SeriesCards","series","s","fieldValue","nodes","frontmatter","_frontmatter","data","group","BaseLayout","FaLayerGroup","Head","SEO","pathname"],"sourceRoot":""}